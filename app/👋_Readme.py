import streamlit as st

st.set_page_config(
    page_title="Hello",
    page_icon="üëã",
)

st.write("# Welcome Train APP Model! üëã")

st.sidebar.success("Selectionne une page de l'application")

st.markdown(
    """
    
    -------------------------------------------------------------------
    
    ## Lien vers le [Github](https://github.com/EvanGrv/PA3-BIGDATA-HLE)
    
    -------------------------------------------------------------------
    
    # Projet Annuel 2023/2024

    ## Classification des vaches, des moutons et des ch√®vres
    
    ### Auteurs:
    - Lucas BONERE
    - Evan GREVEN
    - Hugo HOUNTONDJI
    
    ## Sommaire
    
    1. [Ressource Du Projet](#ressource-du-projet)
    2. [Introduction](#introduction)
    3. [Objectif Du Projet](#objectif-du-projet)
    4. [Mise en Place du Projet](#mise-en-place-du-projet)
    5. [√âtape 1 : Construction d‚Äôun Data Set](#√©tape-1--construction-d‚Äôun-data-set)
    6. [√âtape 2 : Mod√®le Lin√©aire](#√©tape-2--mod√®le-lin√©aire)
       - Importation de la Biblioth√®que
       - D√©finition de la Structure LinearModel1
       - Fonction d'Entra√Ænement
       - Initialisation des Param√®tres
       - Boucle d'Entra√Ænement
       - Calcul de la Sortie
       - Calcul des Erreurs
       - Mise √† Jour des Poids et des Biais
       - Surveillance de la Convergence
       - Fonction de Calcul de la Perte
       - Fonction de Pr√©diction
       - Interfa√ßage avec le Code C
       - Fonction Principale
       - Tests Unitaires
    7. [PMC (Perceptron Multi Couche)](#pmc-perceptron-multi-couche)
       - Description du Code Rust
       - Description du Code Python
       - Cas de Test PMC
    
    ## Ressource Du Projet
    
    - [Lien Github](https://github.com/EvanGrv/PA3-BIGDATA-HLE.git)
    - Sites √† scrapper :
      - [Vache sur Pexels](https://www.pexels.com/fr-fr/chercher/vache/)
      - [Ch√®vre sur Pexels](https://www.pexels.com/fr-fr/chercher/ch%C3%A8vre/)
      - [Vache sur Pixabay](https://pixabay.com/fr/images/search/vache/)
      - [Ch√®vre sur Pixabay](https://pixabay.com/fr/images/search/ch%c3%a8vre/)
    
    ## Introduction
    
    Le projet "Cow vs Goat" explore les capacit√©s de l'apprentissage automatique pour distinguer des images de vaches, de ch√®vres et de moutons. Bien que cela puisse sembler simple, ce projet a des implications pour des syst√®mes de reconnaissance d'images plus avanc√©s.
    
    ## Objectif Du Projet
    
    L'objectif est de tester quatre mod√®les d'apprentissage automatique diff√©rents :
    - **Mod√®le Lin√©aire (ML)**
    - **Perceptron Multi Couches (MLP)**
    - **Radial Basis Function Network (RBF)**
    - **Support Vector Machine (SVM)**
    
    Chaque mod√®le sera √©valu√© sur sa capacit√© √† distinguer entre vache, ch√®vre et mouton, en se basant sur des crit√®res tels que la pr√©cision, le temps de calcul et la g√©n√©ralisation sur de nouvelles donn√©es.
    
    ## Mise en Place du Projet
    
    1. **D√©finition des objectifs**
    2. **Construction du Data Set** : Scrapping d'images √† partir de sites internet pour cr√©er une base de donn√©es.
    
    ## √âtape 1 : Construction d‚Äôun Data Set
    
    ### M√©thode de Scrapping
    - Utilisation initiale de Rust pour t√©l√©charger des images de Pixabay.
    - Adaptation pour utiliser Selenium en Python avec un webdriver Google Chrome pour automatiser la r√©cup√©ration des images.
    - Normalisation et nettoyage des donn√©es (redimensionnement et √©tiquetage).
    
    ## √âtape 2 : Mod√®le Lin√©aire
    
    ### Impl√©mentation
    1. **Importation de la Biblioth√®que**
    2. **D√©finition de la Structure LinearModel1**
    3. **Fonction d'Entra√Ænement** : Initialisation des param√®tres, boucle d'entra√Ænement, calcul des erreurs, mise √† jour des poids et des biais.
    4. **Surveillance de la Convergence** : Calcul et affichage de la perte.
    5. **Interop√©rabilit√© avec le Code C** : Fonctions de pr√©diction et d'entra√Ænement accessibles depuis du code C.
    6. **Tests Unitaires** : Validation du fonctionnement du mod√®le.
    
    ### Visualisation des R√©sultats
    - Trac√© des points d'entra√Ænement et de la ligne de s√©paration des classes √† l'aide de matplotlib.
    
    ## PMC (Perceptron Multi Couche)
    
    ### Description du Code Rust
    - Cr√©ation, entra√Ænement et pr√©diction avec le mod√®le PMC.
    - Utilisation de la r√©tropropagation du gradient pour l'ajustement des poids.
    
    ### Description du Code Python
    - Utilisation de numpy, ctypes, et matplotlib pour interagir avec le mod√®le PMC compil√© en Rust.
    - D√©finition des types de retour et des arguments des fonctions Rust.
    
    ### Cas de Test PMC
    - Tests sp√©cifiques pour diff√©rents sc√©narios : Linear Simple, Linear Multiple, XOR, Multi Cross, Linear 3 Classe.
    
    ## Conclusion
    
    Ce projet a permis de comprendre comment combiner diff√©rents langages de programmation pour d√©velopper des mod√®les de classification efficaces. L'utilisation de Rust pour les calculs lourds et de Python pour l'interop√©rabilit√© et la visualisation a √©t√© particuli√®rement instructive.

"""
)